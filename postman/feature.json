{
	"info": {
		"_postman_id": "f9f18a4d-fe2b-43f3-b63b-8b1371bb2634",
		"name": "Test Explore With Me - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25942592"
	},
	"item": [
		{
			"name": "create category, users and events",
			"item": [
				{
					"name": "Добавление новой категории",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						},
						"description": "Обратите внимание: имя категории должно быть уникальным"
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"users name\",\n    \"email\": \"test@mail.ru\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя №2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"second users name\",\n    \"email\": \"2test@mail.ru\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя №3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"third users name\",\n    \"email\": \"3test@mail.ru\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\": \"annotation annotation annotation\",\n    \"category\" : {{catid}},\n    \"description\": \"description description description\",\n    \"eventDate\": \"2025-01-01 00:00:00\",\n    \"title\": \"title\", \n    \"location\": {\n        \"lat\": 0,\n        \"lon\": 0\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{uid1}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid1}}",
								"events"
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление события №2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\": \"2 annotation annotation annotation\",\n    \"category\" : {{catid}},\n    \"description\": \"1 description description description\",\n    \"eventDate\": \"2024-02-02 00:00:00\",\n    \"title\": \"title2\", \n    \"location\": {\n        \"lat\": 2,\n        \"lon\": 2\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{uid2}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid2}}",
								"events"
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Error Комментарий без подтверждения участия",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
									"    pm.response.to.have.status(409);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const req = JSON.parse(pm.request.body.raw);",
									"const res = pm.response.json();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\" : \"искромётное шоу фиолетовых одуванчиков\"\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{eid1}}?userId={{uid2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eid1}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{uid2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Error Комментарий от инициатора события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
									"    pm.response.to.have.status(409);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const req = JSON.parse(pm.request.body.raw);",
									"const res = pm.response.json();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\" : \"искромётное шоу фиолетовых одуванчиков\"\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{eid1}}?userId={{uid1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eid1}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Error пустой комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.have.status(400);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const req = JSON.parse(pm.request.body.raw);",
									"const res = pm.response.json();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\" : \"\"\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{eid1}}?userId={{uid2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eid1}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{uid2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "make request",
			"item": [
				{
					"name": "Публикация события 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\": \"annotation annotation annotation\",\n    \"category\" : {{catid}},\n    \"description\": \"description description description\",\n    \"title\": \"title\", \n    \"stateAction\" : \"PUBLISH_EVENT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/{{eid1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"{{eid1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Публикация события 1 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\": \"2 annotation annotation annotation\",\n    \"category\" : {{catid}},\n    \"description\": \"1 description description description\",\n    \"title\": \"title2\", \n    \"stateAction\" : \"PUBLISH_EVENT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/{{eid2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"{{eid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос на участие в событии 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);   ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"var query = {};",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
									"",
									"pm.test(\"Запрос на участие должен содержать поля: id, requester, event, status, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('requester');",
									"pm.expect(target).to.have.property('event');",
									"pm.expect(target).to.have.property('status');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"При создании у запроса на участие должен быть статус CONFIRMED\", function () {",
									"    pm.expect(target.status).equal(\"CONFIRMED\");",
									"});",
									"",
									"pm.test(\"Id ивента в запросе и в ответе должны совпадать\", function () {",
									"    pm.expect(target.event.toString()).equal(query['eventId'].toString());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid2}}/requests?eventId={{eid1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid2}}",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос на участие в событии 2 от пользователя 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);   ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"var query = {};",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
									"",
									"pm.test(\"Запрос на участие должен содержать поля: id, requester, event, status, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('requester');",
									"pm.expect(target).to.have.property('event');",
									"pm.expect(target).to.have.property('status');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"При создании у запроса на участие должен быть статус CONFIRMED\", function () {",
									"    pm.expect(target.status).equal(\"CONFIRMED\");",
									"});",
									"",
									"pm.test(\"Id ивента в запросе и в ответе должны совпадать\", function () {",
									"    pm.expect(target.event.toString()).equal(query['eventId'].toString());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid1}}/requests?eventId={{eid2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid1}}",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос на участие в событии 2 от пользователя 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);   ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"var query = {};",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
									"",
									"pm.test(\"Запрос на участие должен содержать поля: id, requester, event, status, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('requester');",
									"pm.expect(target).to.have.property('event');",
									"pm.expect(target).to.have.property('status');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"При создании у запроса на участие должен быть статус CONFIRMED\", function () {",
									"    pm.expect(target.status).equal(\"CONFIRMED\");",
									"});",
									"",
									"pm.test(\"Id ивента в запросе и в ответе должны совпадать\", function () {",
									"    pm.expect(target.event.toString()).equal(query['eventId'].toString());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid3}}/requests?eventId={{eid2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid3}}",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Комментарий к событию 1 от пользователя 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const req = JSON.parse(pm.request.body.raw);",
							"const res = pm.response.json();",
							"",
							"pm.test(\"Данные в запросе должны соответствовать данным в ответе\", () => {",
							"    pm.expect(res.text).equal(req.text);",
							"}); ",
							"",
							"pm.test(\"Test item 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test item 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"искромётное шоу фиолетовых одуванчиков\"').to.eql('искромётное шоу фиолетовых одуванчиков');",
							"});",
							"",
							"pm.test(\"Test item 'reaction' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('reaction');",
							"});",
							"",
							"pm.test(\"Test item 'state' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state');",
							"});",
							"",
							"pm.test(\"Test item 'authorId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"});",
							"",
							"pm.test(\"Test item 'proposal' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('proposal');",
							"});",
							"",
							"pm.test(\"Test item 'created' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"искромётное шоу фиолетовых одуванчиков\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/{{eid1}}?userId={{uid2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eid1}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "userId",
							"value": "{{uid2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий к событию 2 от пользователя 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"искромётное шоу фиолетовых одуванчиков\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/{{eid2}}?userId={{uid1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eid2}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "userId",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий к событию 2 от пользователя 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const req = JSON.parse(pm.request.body.raw);",
							"const res = pm.response.json();",
							"",
							"pm.test(\"Данные в запросе должны соответствовать данным в ответе\", () => {",
							"    pm.expect(res.text).equal(req.text);",
							"}); ",
							"",
							"pm.test(\"Test item 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"",
							"pm.test(\"Test item 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"одуванчики протухли, слишком шумно\"').to.eql('одуванчики протухли, слишком шумно');",
							"});",
							"",
							"pm.test(\"Test item 'reaction' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('reaction');",
							"    pm.expect(jsonData.reaction, '\"reaction\" must be \"NEGATIVE\"').to.eql('NEGATIVE');",
							"});",
							"",
							"pm.test(\"Test item 'state' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state');",
							"});",
							"",
							"pm.test(\"Test item 'authorId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"});",
							"",
							"pm.test(\"Test item 'proposal' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('proposal');",
							"    pm.expect(jsonData.proposal, '\"proposal\" must be \"будьтье добры, проветривайте помещение\"').to.eql('будьтье добры, проветривайте помещение');",
							"});",
							"",
							"pm.test(\"Test item 'created' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"одуванчики протухли, слишком шумно\",\n    \"reaction\" : \"NEGATIVE\",\n    \"proposal\" : \"будьтье добры, проветривайте помещение\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/{{eid2}}?userId={{uid3}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eid2}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "userId",
							"value": "{{uid3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка комментариев к событию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"    ",
							"    let comment1;",
							"    let comment2;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"userId\", user.id);",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.collectionVariables.set(\"eventId\", event.id);",
							"        event = await api.publishEvent(event.id);",
							"",
							"        comment1 = rnd.getComment();",
							"        comment1.userId = user.id;",
							"        comment1.eventId = event.id;",
							"        comment1 = await api.addComment(user.id, comment1);",
							"",
							"        comment2 = rnd.getComment();",
							"        comment2.userId = user.id;",
							"        comment2.eventId = event.id;",
							"        comment2 = await api.addComment(user.id, comment2);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const res = pm.response.json();",
							"",
							"pm.test(\"подборка комментариев к Событию должна содержать 1 комментарий\", () => {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).equal(1);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/public?from=0&size=10&eventId={{eid1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"public"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						},
						{
							"key": "eventId",
							"value": "{{eid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка комментариев к событию 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"    ",
							"    let comment1;",
							"    let comment2;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"userId\", user.id);",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.collectionVariables.set(\"eventId\", event.id);",
							"        event = await api.publishEvent(event.id);",
							"",
							"        comment1 = rnd.getComment();",
							"        comment1.userId = user.id;",
							"        comment1.eventId = event.id;",
							"        comment1 = await api.addComment(user.id, comment1);",
							"",
							"        comment2 = rnd.getComment();",
							"        comment2.userId = user.id;",
							"        comment2.eventId = event.id;",
							"        comment2 = await api.addComment(user.id, comment2);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const res = pm.response.json();",
							"",
							"pm.test(\"подборка комментариев к Событию должна содержать 2 комментариz\", () => {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).equal(2);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/public?from=0&size=10&eventId={{eid2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"public"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						},
						{
							"key": "eventId",
							"value": "{{eid2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const req = JSON.parse(pm.request.body.raw);",
							"const res = pm.response.json();",
							"",
							"pm.test(\"Данные в запросе должны соответствовать данным в ответе\", () => {",
							"    pm.expect(res.text).equal(req.text);",
							"}); ",
							"",
							"pm.test(\"Test item 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"",
							"pm.test(\"Test item 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"UPDATE: КАКОЕ-ТО\"').to.eql('UPDATE: КАКОЕ-ТО');",
							"});",
							"",
							"pm.test(\"Test item 'reaction' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('reaction');",
							"    pm.expect(jsonData.reaction, '\"reaction\" must be \"NEUTRAL\"').to.eql('NEUTRAL');",
							"});",
							"",
							"pm.test(\"Test item 'state' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state');",
							"});",
							"",
							"pm.test(\"Test item 'isEdited' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('isEdited');",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);",
							"});",
							"",
							"pm.test(\"Test item 'authorId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"});",
							"",
							"pm.test(\"Test item 'proposal' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('proposal');",
							"});",
							"",
							"pm.test(\"Test item 'created' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"UPDATE: КАКОЕ-ТО\",\n    \"reaction\": \"NEUTRAL\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/{{eid2}}/{{comid2}}/?userId={{uid1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eid2}}",
						"{{comid2}}",
						""
					],
					"query": [
						{
							"key": "userId",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария 2 к событию 2 пользователем 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {",
							"    pm.response.to.have.status(204);  ",
							"    pm.response.to.not.be.withBody;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/{{eid2}}/{{comid2}}?userId={{uid1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eid2}}",
						"{{comid2}}"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{uid1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Error удаление чужого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/{{eid1}}/{{comid1}}?userId={{uid3}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{eid1}}",
						"{{comid1}}"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{uid3}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": "1"
		},
		{
			"key": "uid2",
			"value": "2",
			"type": "string"
		},
		{
			"key": "uid3",
			"value": "3",
			"type": "string"
		},
		{
			"key": "eid1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eid2",
			"value": "2",
			"type": "string"
		},
		{
			"key": "catid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "rid1",
			"value": "",
			"type": "string"
		},
		{
			"key": "notFound",
			"value": "1001"
		},
		{
			"key": "comid1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "comid2",
			"value": "2",
			"type": "string"
		}
	]
}